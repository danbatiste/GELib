# Functions
code = r'''
#include <cupy/complex.cuh>
extern "C" __global__
void fract_file_kernel(const complex<float>* c, int* output_fractal_values,
                       const float t, const int iter, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x;
    if (tid < N) {
        complex<float> z = 0.0f;
        int i = 0;

        complex<float> z1, z2;
        complex<float> z_denominator_1, z_denominator_2;

        while (i < iter) {
            z_denominator_1 = (1.0f);
            if (z_denominator_1 == 0.0f) {
                z_denominator_1 = 1.0f;
            }
            z1 = (z*z + c[tid])/z_denominator_1;

            z_denominator_2 = (3.0f*z*z + 2.0f*z + 1.0f);
            if (z_denominator_2 == 0.0f) {
                z_denominator_2 = 1.0f;
            }
            z2 = (z*z*z*z*z + z*z*z*z + z*z*z + z*z + z + c[tid])/z_denominator_2;
            z = z1*(1.0f - sin(t*3.14159f/2.0f)) + z2*(t); //Linear interpolation between the two fractals using euclidean distance
            i++;
            if (abs(z) > (4.0f)) {
                output_fractal_values[tid] = i;
                break;
            }
        }
        if (i == iter) {
            output_fractal_values[tid] = -1;
        }
    }
}
'''
fract_file_kernel = cp.RawKernel(code, 'fract_file_kernel')


fract_file_coloring_kernel = cp.RawKernel(r'''
extern "C" __global__
void fract_file_coloring_kernel(const int* iterations, int* output_rgbx_ints, const float t, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x; // thread id/index?
    if (tid < N) {
        if (iterations[tid] == -1.0) {
            output_rgbx_ints[tid] = 0;
        } else {
            float S, V;
            S = 1.0f;
            V = 1.0f;

            int iteration_mod = 5;
            float shade = (float) (iterations[tid] % iteration_mod);
            shade = 1 - shade/((float) iteration_mod);

            int iteration_wave = iterations[tid]/iteration_mod;
            int colors = 2;
            float color = (float) (iteration_wave%colors) / colors;

            float huedeg = 360.0f - 60.0f;
            V = color;

            float k_5 = fmod((5 + huedeg/60), 6);
            float k_3 = fmod((3 + huedeg/60), 6);
            float k_1 = fmod((1 + huedeg/60), 6);
            k_5 = min(k_5, 4.0 - k_5);
            k_5 = min(k_5, 1.0);
            k_5 = V - V*S*max(k_5, 0.0);
            k_3 = min(k_3, 4.0 - k_3);
            k_3 = min(k_3, 1.0);
            k_3 = V - V*S*max(k_3, 0.0);
            k_1 = min(k_1, 4.0 - k_1);
            k_1 = min(k_1, 1.0);
            k_1 = V - V*S*max(k_1, 0.0);

            int R = round(shade*255*( 1 - k_5 ));
            int G = round(shade*255*( 1 - k_3 ));
            int B = round(shade*255*( 1 - k_1 ));

            output_rgbx_ints[tid] = (B << 16) | (G << 8) | R;
        }
    }
}
''', 'fract_file_coloring_kernel')



##
## Driver code
##
fractal_function = fract_file_kernel
color_function = fract_file_coloring_kernel
framecount = 60*4
fps = 60

frames = []
times = np.linspace(0, 1, num=framecount, dtype=cp.float32) # Must be an np linspace, not cp linspace!
times = 1 + np.sin(times*pi - pi/2)
gpu_render = True
fractal_function_input_type = cp.complex64
fractal_function_output_type = cp.int32

for i in range(framecount):
    t = times[i]
    zoom = 0.5 + t/4
    center = [-0.5*(1-t/4), 0]
    corners = cp.array([
        [center[0], center[1]],
        [center[0], center[1]],
    ], dtype=fractal_function_input_type) + cp.array([
        [-1, -1],
        [1, 1],
    ], dtype=fractal_function_input_type)/zoom

    iterations = int(100)

    #mat_transform = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    
    image_resolution = 2000
    height = 1000
    width = 1000
    #print(i, t)

    frames.append(Frame(corners, image_resolution, width, height,
                        fractal_function, color_function, iterations, t,
                        fractal_function_input_type=fractal_function_input_type,
                        fractal_function_output_type=fractal_function_output_type,
                        gpu_render=gpu_render))