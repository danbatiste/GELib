fract_file_coloring_kernel = cp.RawKernel(r'''
extern "C" __global__
void fract_file_coloring_kernel(const int* iterations, int* output_rgbx_ints, const float t, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x; // thread id/index?
    if (tid < N) {
        if (iterations[tid] == -1.0) {
            output_rgbx_ints[tid] = 0;
        } else {
            float S, V;
            S = 1.0f;
            V = 1.0f;

            int iteration_mod = 4;
            float shade = (float) (iterations[tid] % iteration_mod);
            shade = 1 - shade/((float) iteration_mod);

            int iteration_wave = iterations[tid]/iteration_mod;
            int colors = (int) 10;
            float color = (float) (iteration_wave%colors) / colors;

            float huedeg = 360.0f*(t/10 + color);

            float k_5 = fmod((5 + huedeg/60), 6);
            float k_3 = fmod((3 + huedeg/60), 6);
            float k_1 = fmod((1 + huedeg/60), 6);
            k_5 = min(k_5, 4.0 - k_5);
            k_5 = min(k_5, 1.0);
            k_5 = V - V*S*max(k_5, 0.0);
            k_3 = min(k_3, 4.0 - k_3);
            k_3 = min(k_3, 1.0);
            k_3 = V - V*S*max(k_3, 0.0);
            k_1 = min(k_1, 4.0 - k_1);
            k_1 = min(k_1, 1.0);
            k_1 = V - V*S*max(k_1, 0.0);

            int R = round(shade*255*( 1 - k_5 ));
            int G = round(shade*255*( 1 - k_3 ));
            int B = round(shade*255*( 1 - k_1 ));

            output_rgbx_ints[tid] = (B << 16) | (G << 8) | R;
        }
    }
}
''', 'fract_file_coloring_kernel')

code = r'''
#include <cupy/complex.cuh>
extern "C" __global__
void fract_file_kernel(const complex<float>* c, int* output_fractal_values,
                       const float t, const int iter, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x;
    if (tid < N) {
        complex<float> z = 0.0f;
        int i = 0;


        complex<float> z0;
        complex<float> z_denominator;

        //float conv = 50000000.0f;
        z = 0.0f + c[tid];
        float real_z = real(z);
        float imag_z = imag(z);
        while (i < iter) {
            if ( ((int)floor(real(z)))%2 == 0) {
                real_z = real_z/2.0f;
            } else {
                real_z = 3.0f*real_z + 1.0f;
            }
            if ( ((int)floor(imag(z)))%2 == 0) {
                imag_z = imag_z/2.0f;
            } else {
                imag_z = 3.0f*imag_z + 1.0f;
            }
            if (floor(real_z) == 1 || floor(imag_z) == 1) {
                output_fractal_values[tid] = i; //floor(log((float)i)+1);
                break;
            }

            i++;
        }
        if (i == iter) {
            output_fractal_values[tid] = -1;
        }
    }
}
'''
fract_file_kernel = cp.RawKernel(code, 'fract_file_kernel')

##
## Driver code
##
fractal_function = fract_file_kernel
color_function = fract_file_coloring_kernel

fps = 30
seconds = 10
framecount = fps*seconds
print("TOTAL FRAMES: ", framecount)

frames = []
times = np.linspace(0, 1, num=framecount, dtype=cp.float32) # Must be an np linspace, not cp linspace!
gpu_render = True
fractal_function_input_type = cp.complex64
fractal_function_output_type = cp.int32

for i in range(framecount):
    t = times[i]
    pct_t = (t - times[0])/(times[-1] - times[0])
    zoom = (1/100_00)
    center = [0, 0]
    corners = cp.array([
        [center[0], center[1]],
        [center[0], center[1]],
    ], dtype=fractal_function_input_type) + cp.array([
        [-1, -1],
        [+1, +1],
    ], dtype=fractal_function_input_type)/zoom

    iterations = int(100_000_000)
    image_resolution = 800
    height = 800
    width  = 800

    kernels_to_apply = [


    kernels.sharpen_kernel(3),
    #kernels.edge_detect_kernel_3(1 - pct_t**(0.7), intensity=2),
    #kernels.interpolated(pct_t, kernels.stitching_kernel(4, 4)),
    ]
    filters_to_apply = [filters.custom_kernel(k) for k in kernels_to_apply]

    frames.append(Frame(corners, image_resolution, width, height,
                        fractal_function, color_function, iterations, t,
                        filters_to_apply,
                        fractal_function_input_type=fractal_function_input_type,
                        fractal_function_output_type=fractal_function_output_type,
                        gpu_render=gpu_render))