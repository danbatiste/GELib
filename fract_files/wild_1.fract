fract_file_coloring_kernel = cp.RawKernel(r'''
extern "C" __global__
void fract_file_coloring_kernel(const int* iterations, int* output_rgbx_ints, const float t, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x; // thread id/index?
    if (tid < N) {
        if (iterations[tid] == -1.0) {
            output_rgbx_ints[tid] = 0;
        } else {
            float S, V;
            S = 1.0f;
            V = 1.0f;

            int iteration_mod = 5;
            float shade = (float) (iterations[tid] % iteration_mod);
            shade = 1 - shade/((float) iteration_mod);

            int iteration_wave = iterations[tid]/iteration_mod;
            int colors = (int) 15;
            float color = (float) (iteration_wave%colors) / colors;

            float huedeg = 360.0f*(10.0f*t*0.0f + color);

            float k_5 = fmod((5 + huedeg/60), 6);
            float k_3 = fmod((3 + huedeg/60), 6);
            float k_1 = fmod((1 + huedeg/60), 6);
            k_5 = min(k_5, 4.0 - k_5);
            k_5 = min(k_5, 1.0);
            k_5 = V - V*S*max(k_5, 0.0);
            k_3 = min(k_3, 4.0 - k_3);
            k_3 = min(k_3, 1.0);
            k_3 = V - V*S*max(k_3, 0.0);
            k_1 = min(k_1, 4.0 - k_1);
            k_1 = min(k_1, 1.0);
            k_1 = V - V*S*max(k_1, 0.0);

            int R = round(shade*255*( 1 - k_5 ));
            int G = round(shade*255*( 1 - k_3 ));
            int B = round(shade*255*( 1 - k_1 ));

            output_rgbx_ints[tid] = (B << 16) | (G << 8) | R;
        }
    }
}
''', 'fract_file_coloring_kernel')

code = r'''
#include <cupy/complex.cuh>
extern "C" __global__
void fract_file_kernel(const complex<float>* c, int* output_fractal_values,
                       const float t, const int iter, int N) {
    int tid = blockDim.x * blockIdx.x + threadIdx.x;
    if (tid < N) {
        complex<float> z = 0.0f;
        int i = 0;

        complex<float> z1, z2;
        complex<float> z_denominator_1, z_denominator_2;

        while (i < iter) {
            z_denominator_1 = (z*z + c[tid]);
            if (z_denominator_1 == 0.0f) {
                z_denominator_1 = 1.0f;
            }
            z1 = (z*z*z + z*c[tid] + c[tid])/z_denominator_1;

            z_denominator_2 = (z + 1.0f);
            if (z_denominator_2 == 0.0f) {
                z_denominator_2 = 1.0f;
            }
            z2 = (z*z + 2.0f*z + c[tid]*z + c[tid])/z_denominator_2;
            z = z1*(1.0f - sin(t*3.14159f/2.0f)) + z2*(t); //Linear interpolation between the two fractals using euclidean distance
            i++;
            if (abs(z) > (20.0f)) {
                output_fractal_values[tid] = i;
                break;
            }
        }
        if (i == iter) {
            output_fractal_values[tid] = -1;
        }
    }
}
'''
fract_file_kernel = cp.RawKernel(code, 'fract_file_kernel')

##
## Driver code
##
fractal_function = fract_file_kernel
color_function = fract_file_coloring_kernel
framecount = 120*8*7
fps = 60

frames = []
times = np.linspace(-10, 10, num=framecount, dtype=cp.float32) # Must be an np linspace, not cp linspace!
#times = np.sin(times*pi/2)
times = 1 - times # Reverse time
gpu_render = True
fractal_function_input_type = cp.complex64
fractal_function_output_type = cp.int32

# Filters (Can be transferred into for loop)
# TODO edit engine so that it does one fft for all filters

for i in range(framecount):
    t = times[i]
    pct_t = (t - times[0])/(times[-1] - times[0])
    zoom = 1
    center = [0, 0]
    corners = cp.array([
        [center[0], center[1]],
        [center[0], center[1]],
    ], dtype=fractal_function_input_type) + cp.array([
        [-1, -1],
        [+1, +1],
    ], dtype=fractal_function_input_type)/zoom

    iterations = int(600)
    image_resolution = 8000
    height = 5000
    width  = 5000

    kernels_to_apply = [
    #kernels.interpolated(1 - (1-pct_t)*(1-pct_t), kernels.stitching_kernel(20, 0.01)),
    kernels.edge_detect_kernel_3(pct_t, intensity=1.5),
    kernels.interpolated(1 - pct_t, kernels.sharpen_kernel(3))
    ]
    filters_to_apply = [filters.custom_kernel(k) for k in kernels_to_apply]

    frames.append(Frame(corners, image_resolution, width, height,
                        fractal_function, color_function, iterations, t,
                        filters_to_apply,
                        fractal_function_input_type=fractal_function_input_type,
                        fractal_function_output_type=fractal_function_output_type,
                        gpu_render=gpu_render))